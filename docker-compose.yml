version: "3.0"

# --- networking
networks:
  main_net:
    driver: bridge

# --- volumes
volumes:
  mongodb:
    driver: local
  postgres:
    driver: local
  elasticsearch:
    driver: local
  minio:
    driver: local
  questdb:
    driver: local
  timescale:
    driver: local
  vault:
    driver: local

# --- services
services:
  # redis
  redis:
    container_name: redis
    image: redis/redis-stack:7.0.2-RC2
    ports:
      - "6379:6379"
      - "8001:8001"
    networks:
      - main_net

  # mongodb
  mongodb:
    container_name: mongodb
    image: mongo:4.2
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    networks:
      - main_net
    volumes:
      - mongodb:/data/db
  # minio
  minio:
    container_name: minio
    image: minio/minio
    command: 'server /data --console-address ":9001"'
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    networks:
      - main_net
    volumes:
      - minio:/data

  # postgresql
  postgresql:
    container_name: postgresql
    image: postgres:11-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=postgres
    networks:
      - main_net
    volumes:
      - postgres:/var/lib/postgresql/data

  # kafka zookeeper
  kafka_zookeeper:
    container_name: kafka-zookeeper
    image: confluentinc/cp-zookeeper:7.0.1
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - main_net

  # kafka broker
  kafka_broker:
    container_name: kafka-broker
    image: confluentinc/cp-kafka:7.0.1
    depends_on:
      - kafka_zookeeper
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=kafka_zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka_broker:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    networks:
      - main_net

  # akhq (kafka management UI)
  akhq:
    container_name: akhq-kafka-ui
    image: tchiotludo/akhq:0.21.0
    depends_on:
      - kafka_broker
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka_broker:29092"
    ports:
      - 8080:8080
    networks:
      - main_net

  # elasticsearch
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.2.2
    ports:
      - 9200:9200
    environment:
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - "discovery.type=single-node"
    networks:
      - main_net
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data

  # elastic apm server
  apm:
    container_name: elastic-apm
    image: docker.elastic.co/apm/apm-server:8.2.2
    depends_on:
      - elasticsearch
    ports:
      - 8200:8200
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E apm-server.kibana.enabled=true
        -E apm-server.kibana.host=kibana:5601
        -E setup.kibana.host=kibana:5601
        -E setup.template.settings.index.number_of_replicas=0
        -E output.elasticsearch.hosts=["elasticsearch:9200"]
    networks:
      - main_net

  # kibana
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.2.2
    depends_on:
      - elasticsearch
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - main_net

  # questDB
  questdb:
    container_name: questdb
    image: questdb/questdb:6.5.3
    ports:
      - 9010:9000
      - 9009:9009
      - 8812:8812
      - 9003:9003
    networks:
      - main_net
    volumes:
      - questdb:/var/lib/questdb/db

  timescaledb:
    container_name: timescaledb
    image: timescale/timescaledb-ha:pg14-latest
    ports:
      - 5442:5432
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=postgres
    networks:
      - main_net
    volumes:
      - timescale:/var/lib/timescale/data

    # vault to store env

  vault:
    container_name: vault
    image: vault
    ports:
      - 8200:8200
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=myroot
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    cap_add: 
      - IPC_LOCK
    networks:
      - main_net
    volumes:
      - vault:/var/lib/vault/data
